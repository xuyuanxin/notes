<?xml version="1.0" encoding="UTF-8"?>   <!-- XML头，指定该xml文档的版本和编码方式  -->
<project xmlns="http://maven.apache.org/POM/4.0.0" 
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">  <!-- project是所有pom.xml的根元素 -->
  <modelVersion>4.0.0</modelVersion>     <!-- 根元素下的第一个子元素， modelVersion指定了当前POM模型的版本，对于Maven2及Maven3来说，它只能是4.0.0 -->
  <groupId>com.juvenxu.mvnbook</groupId> <!-- 属于哪个组 -->
  <artifactId>hello-world</artifactId>   <!-- 该项目在组中的唯一ID -->
  <version>1.0-SNAPSHOT</version>        <!-- 该项目的版本 hello-world-1.0-SNAPSHOT.jar -->
  <name>Maven Hello World Project</name> <!-- 该项目的名字，不是必须的 -->
  <dependencies>
    <dependency>
  	  <groupId>junit</groupId>
  	  <artifactId>junit</artifactId>
  	  <version>4.13.1</version>  <!-- junit-4.7.jar -->
  	  <scope>test</scope> <!-- 依赖范围，表示只对测试有效。默认是compile -->
    </dependency>
  </dependencies>
  <build>
    <plugins>
  	  <plugin>
  	    <groupId>org.apache.maven.plugins</groupId>
  	    <artifactId>maven-compiler-plugin</artifactId>
  	    <configuration>
  	      <source>1.8</source> <!-- compile插件默认只支持编译Java1.3 -->
  	      <target>1.8</target>
  	    </configuration>
  	  </plugin>
  	  <plugin> <!-- 为了生成可执行的jar文件，需要借助 maven-shade-plugin -->
  	    <groupId>org.apache.maven.plugins</groupId>
  	    <artifactId>maven-shade-plugin</artifactId>
  	    <version>1.4</version>
  	    <executions>
  	      <execution>
  	        <phase>package</phase>
  	        <goals>
  	          <goal>shade</goal>
  	        </goals>
  	        <configuration>
  	          <transformers>
  	            <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
  	              <mainClass>com.juvenxu.mvnbook.helloworld.HelloWorld</mainClass>
  	            </transformer> 
  	          </transformers>  <!-- 默认生成的jar包不能运行，因为带有main方法的类信息不会添加到manifest中-->
  	        </configuration>   <!-- 为了生成可执行的jar文件，要借助maven-shade-plugin -->
  	      </execution>         <!-- 配置的mainClass，打包时会放入MANIFEST中-->
  	    </executions>          <!-- hello-world-1.0-SNAPSHOT.jar 带有Main-class信息的可运行jar -->
  	  </plugin>                <!-- original-hello-world-1.0-SNAPSHOT.jar 原始的jar(自动生成) -->
    </plugins>                 <!-- META-INF/MANIFEST.MF -->
  </build>                     <!-- java -jar target\hello-world-1.0-SNAPSHOT.jar -->
</project> 

<!-- -->
<!--
 POM: Project Object Model 项目对象模型；Maven项目的核心是pom.xml, 类似于Make的Makefile，Ant的build.xml
 
 Maven约定：
 1 项目主代码位于 src/main/java
   主目录下有 com/juvenxu/mvnbook/helloworld/HelloWorld.java. 和 groupId artifactId 吻合
 2 Maven构建的所有输出都在 target/ 目录中
   target/classses: 编译好的类
 3 测试代码目录 src/test/java
 4 项目的根目录放置pom.xml
 
 创建一个名为hello-world的文件夹，在此文件夹下创建pom.xml的文件。
 
 


--> 